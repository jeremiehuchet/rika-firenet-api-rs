/*
 * Rika Firenet - OpenAPI 3.0
 *
 * Rika Firenet API operations
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for passing parameters to the method [`stove_controls`]
#[derive(Clone, Debug)]
pub struct StoveControlsParams {
    /// Stove identifier
    pub stove_id: String,
    pub room_power_request: Option<i32>,
    pub bake_temperature: Option<String>,
    pub convection_fan1_active: Option<bool>,
    pub convection_fan1_area: Option<i32>,
    pub convection_fan1_level: Option<i32>,
    pub convection_fan2_active: Option<bool>,
    pub convection_fan2_area: Option<i32>,
    pub convection_fan2_level: Option<i32>,
    pub debug0: Option<i32>,
    pub debug1: Option<i32>,
    pub debug2: Option<i32>,
    pub debug3: Option<i32>,
    pub debug4: Option<i32>,
    pub eco_mode: Option<bool>,
    pub frost_protection_active: Option<bool>,
    pub frost_protection_temperature: Option<String>,
    pub heating_power: Option<i32>,
    pub heating_time_fri1: Option<String>,
    pub heating_time_fri2: Option<String>,
    pub heating_time_mon1: Option<String>,
    pub heating_time_mon2: Option<String>,
    pub heating_time_sat1: Option<String>,
    pub heating_time_sat2: Option<String>,
    pub heating_time_sun1: Option<String>,
    pub heating_time_sun2: Option<String>,
    pub heating_time_thu1: Option<String>,
    pub heating_time_thu2: Option<String>,
    pub heating_time_tue1: Option<String>,
    pub heating_time_tue2: Option<String>,
    pub heating_time_wed1: Option<String>,
    pub heating_time_wed2: Option<String>,
    pub heating_times_active_for_comfort: Option<bool>,
    pub on_off: Option<bool>,
    pub operating_mode: Option<i32>,
    pub revision: Option<i32>,
    pub set_back_temperature: Option<String>,
    pub target_temperature: Option<String>,
    pub temperature_offset: Option<String>,
}

/// struct for passing parameters to the method [`stove_status`]
#[derive(Clone, Debug)]
pub struct StoveStatusParams {
    /// Stove identifier
    pub stove_id: String,
}

/// struct for typed errors of method [`list_stoves`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListStovesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`stove_controls`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StoveControlsError {
    Status404(String),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`stove_status`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StoveStatusError {
    Status401(String),
    Status500(String),
    UnknownValue(serde_json::Value),
}

pub async fn list_stoves(
    configuration: &configuration::Configuration,
) -> Result<String, Error<ListStovesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/web/summary", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(local_var_content)
    } else {
        let local_var_entity: Option<ListStovesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn stove_controls(
    configuration: &configuration::Configuration,
    params: StoveControlsParams,
) -> Result<(), Error<StoveControlsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let stove_id = params.stove_id;
    let room_power_request = params.room_power_request;
    let bake_temperature = params.bake_temperature;
    let convection_fan1_active = params.convection_fan1_active;
    let convection_fan1_area = params.convection_fan1_area;
    let convection_fan1_level = params.convection_fan1_level;
    let convection_fan2_active = params.convection_fan2_active;
    let convection_fan2_area = params.convection_fan2_area;
    let convection_fan2_level = params.convection_fan2_level;
    let debug0 = params.debug0;
    let debug1 = params.debug1;
    let debug2 = params.debug2;
    let debug3 = params.debug3;
    let debug4 = params.debug4;
    let eco_mode = params.eco_mode;
    let frost_protection_active = params.frost_protection_active;
    let frost_protection_temperature = params.frost_protection_temperature;
    let heating_power = params.heating_power;
    let heating_time_fri1 = params.heating_time_fri1;
    let heating_time_fri2 = params.heating_time_fri2;
    let heating_time_mon1 = params.heating_time_mon1;
    let heating_time_mon2 = params.heating_time_mon2;
    let heating_time_sat1 = params.heating_time_sat1;
    let heating_time_sat2 = params.heating_time_sat2;
    let heating_time_sun1 = params.heating_time_sun1;
    let heating_time_sun2 = params.heating_time_sun2;
    let heating_time_thu1 = params.heating_time_thu1;
    let heating_time_thu2 = params.heating_time_thu2;
    let heating_time_tue1 = params.heating_time_tue1;
    let heating_time_tue2 = params.heating_time_tue2;
    let heating_time_wed1 = params.heating_time_wed1;
    let heating_time_wed2 = params.heating_time_wed2;
    let heating_times_active_for_comfort = params.heating_times_active_for_comfort;
    let on_off = params.on_off;
    let operating_mode = params.operating_mode;
    let revision = params.revision;
    let set_back_temperature = params.set_back_temperature;
    let target_temperature = params.target_temperature;
    let temperature_offset = params.temperature_offset;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/api/client/{stoveId}/controls",
        local_var_configuration.base_path,
        stoveId = crate::apis::urlencode(stove_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = room_power_request {
        local_var_form_params.insert("RoomPowerRequest", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = bake_temperature {
        local_var_form_params.insert("bakeTemperature", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = convection_fan1_active {
        local_var_form_params.insert("convectionFan1Active", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = convection_fan1_area {
        local_var_form_params.insert("convectionFan1Area", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = convection_fan1_level {
        local_var_form_params.insert("convectionFan1Level", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = convection_fan2_active {
        local_var_form_params.insert("convectionFan2Active", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = convection_fan2_area {
        local_var_form_params.insert("convectionFan2Area", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = convection_fan2_level {
        local_var_form_params.insert("convectionFan2Level", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = debug0 {
        local_var_form_params.insert("debug0", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = debug1 {
        local_var_form_params.insert("debug1", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = debug2 {
        local_var_form_params.insert("debug2", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = debug3 {
        local_var_form_params.insert("debug3", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = debug4 {
        local_var_form_params.insert("debug4", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = eco_mode {
        local_var_form_params.insert("ecoMode", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = frost_protection_active {
        local_var_form_params.insert("frostProtectionActive", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = frost_protection_temperature {
        local_var_form_params.insert(
            "frostProtectionTemperature",
            local_var_param_value.to_string(),
        );
    }
    if let Some(local_var_param_value) = heating_power {
        local_var_form_params.insert("heatingPower", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heating_time_fri1 {
        local_var_form_params.insert("heatingTimeFri1", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heating_time_fri2 {
        local_var_form_params.insert("heatingTimeFri2", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heating_time_mon1 {
        local_var_form_params.insert("heatingTimeMon1", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heating_time_mon2 {
        local_var_form_params.insert("heatingTimeMon2", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heating_time_sat1 {
        local_var_form_params.insert("heatingTimeSat1", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heating_time_sat2 {
        local_var_form_params.insert("heatingTimeSat2", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heating_time_sun1 {
        local_var_form_params.insert("heatingTimeSun1", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heating_time_sun2 {
        local_var_form_params.insert("heatingTimeSun2", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heating_time_thu1 {
        local_var_form_params.insert("heatingTimeThu1", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heating_time_thu2 {
        local_var_form_params.insert("heatingTimeThu2", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heating_time_tue1 {
        local_var_form_params.insert("heatingTimeTue1", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heating_time_tue2 {
        local_var_form_params.insert("heatingTimeTue2", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heating_time_wed1 {
        local_var_form_params.insert("heatingTimeWed1", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heating_time_wed2 {
        local_var_form_params.insert("heatingTimeWed2", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = heating_times_active_for_comfort {
        local_var_form_params.insert(
            "heatingTimesActiveForComfort",
            local_var_param_value.to_string(),
        );
    }
    if let Some(local_var_param_value) = on_off {
        local_var_form_params.insert("onOff", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = operating_mode {
        local_var_form_params.insert("operatingMode", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = revision {
        local_var_form_params.insert("revision", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = set_back_temperature {
        local_var_form_params.insert("setBackTemperature", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = target_temperature {
        local_var_form_params.insert("targetTemperature", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = temperature_offset {
        local_var_form_params.insert("temperatureOffset", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<StoveControlsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn stove_status(
    configuration: &configuration::Configuration,
    params: StoveStatusParams,
) -> Result<crate::models::StoveStatus, Error<StoveStatusError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let stove_id = params.stove_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/api/client/{stoveId}/status",
        local_var_configuration.base_path,
        stoveId = crate::apis::urlencode(stove_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<StoveStatusError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
