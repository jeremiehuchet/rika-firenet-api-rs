/*
 * Rika Firenet - OpenAPI 3.0
 *
 * Rika Firenet API operations
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{Error, configuration};
use crate::apis::ContentType;
use crate::{apis::ResponseContent, models};
use async_trait::async_trait;
#[cfg(feature = "mockall")]
use mockall::automock;
use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use std::sync::Arc;

#[cfg_attr(feature = "mockall", automock)]
#[async_trait]
pub trait StovesApi: Send + Sync {
    /// GET /web/summary
    ///
    ///
    async fn list_stoves(&self) -> Result<String, Error<ListStovesError>>;

    /// POST /api/client/{stoveId}/controls
    ///
    ///
    async fn stove_controls(
        &self,
        params: StoveControlsParams,
    ) -> Result<(), Error<StoveControlsError>>;

    /// GET /api/client/{stoveId}/status
    ///
    ///
    async fn stove_status(
        &self,
        params: StoveStatusParams,
    ) -> Result<models::StoveStatus, Error<StoveStatusError>>;
}

pub struct StovesApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl StovesApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

/// struct for passing parameters to the method [`stove_controls`]
#[derive(Clone, Debug)]
pub struct StoveControlsParams {
    /// Stove identifier
    pub stove_id: String,
    pub room_power_request: Option<u8>,
    pub bake_temperature: Option<String>,
    pub convection_fan1_active: Option<bool>,
    pub convection_fan1_area: Option<i32>,
    pub convection_fan1_level: Option<i32>,
    pub convection_fan2_active: Option<bool>,
    pub convection_fan2_area: Option<i32>,
    pub convection_fan2_level: Option<i32>,
    pub debug0: Option<i32>,
    pub debug1: Option<i32>,
    pub debug2: Option<i32>,
    pub debug3: Option<i32>,
    pub debug4: Option<i32>,
    pub eco_mode: Option<bool>,
    pub frost_protection_active: Option<bool>,
    pub frost_protection_temperature: Option<String>,
    pub heating_power: Option<u8>,
    pub heating_time_fri1: Option<String>,
    pub heating_time_fri2: Option<String>,
    pub heating_time_mon1: Option<String>,
    pub heating_time_mon2: Option<String>,
    pub heating_time_sat1: Option<String>,
    pub heating_time_sat2: Option<String>,
    pub heating_time_sun1: Option<String>,
    pub heating_time_sun2: Option<String>,
    pub heating_time_thu1: Option<String>,
    pub heating_time_thu2: Option<String>,
    pub heating_time_tue1: Option<String>,
    pub heating_time_tue2: Option<String>,
    pub heating_time_wed1: Option<String>,
    pub heating_time_wed2: Option<String>,
    pub heating_times_active_for_comfort: Option<bool>,
    pub on_off: Option<bool>,
    pub operating_mode: Option<u8>,
    pub revision: Option<i32>,
    pub set_back_temperature: Option<String>,
    pub target_temperature: Option<String>,
    pub temperature_offset: Option<String>,
}

/// struct for passing parameters to the method [`stove_status`]
#[derive(Clone, Debug)]
pub struct StoveStatusParams {
    /// Stove identifier
    pub stove_id: String,
}

#[async_trait]
impl StovesApi for StovesApiClient {
    async fn list_stoves(&self) -> Result<String, Error<ListStovesError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/web/summary", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => return Ok(local_var_content),
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be converted to `String`"
                    ))));
                }
            }
        } else {
            let local_var_entity: Option<ListStovesError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn stove_controls(
        &self,
        params: StoveControlsParams,
    ) -> Result<(), Error<StoveControlsError>> {
        let StoveControlsParams {
            stove_id,
            room_power_request,
            bake_temperature,
            convection_fan1_active,
            convection_fan1_area,
            convection_fan1_level,
            convection_fan2_active,
            convection_fan2_area,
            convection_fan2_level,
            debug0,
            debug1,
            debug2,
            debug3,
            debug4,
            eco_mode,
            frost_protection_active,
            frost_protection_temperature,
            heating_power,
            heating_time_fri1,
            heating_time_fri2,
            heating_time_mon1,
            heating_time_mon2,
            heating_time_sat1,
            heating_time_sat2,
            heating_time_sun1,
            heating_time_sun2,
            heating_time_thu1,
            heating_time_thu2,
            heating_time_tue1,
            heating_time_tue2,
            heating_time_wed1,
            heating_time_wed2,
            heating_times_active_for_comfort,
            on_off,
            operating_mode,
            revision,
            set_back_temperature,
            target_temperature,
            temperature_offset,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/client/{stoveId}/controls",
            local_var_configuration.base_path,
            stoveId = crate::apis::urlencode(stove_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        let mut local_var_form_params = std::collections::HashMap::new();
        if let Some(local_var_param_value) = room_power_request {
            local_var_form_params.insert("RoomPowerRequest", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = bake_temperature {
            local_var_form_params.insert("bakeTemperature", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = convection_fan1_active {
            local_var_form_params.insert("convectionFan1Active", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = convection_fan1_area {
            local_var_form_params.insert("convectionFan1Area", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = convection_fan1_level {
            local_var_form_params.insert("convectionFan1Level", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = convection_fan2_active {
            local_var_form_params.insert("convectionFan2Active", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = convection_fan2_area {
            local_var_form_params.insert("convectionFan2Area", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = convection_fan2_level {
            local_var_form_params.insert("convectionFan2Level", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = debug0 {
            local_var_form_params.insert("debug0", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = debug1 {
            local_var_form_params.insert("debug1", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = debug2 {
            local_var_form_params.insert("debug2", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = debug3 {
            local_var_form_params.insert("debug3", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = debug4 {
            local_var_form_params.insert("debug4", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = eco_mode {
            local_var_form_params.insert("ecoMode", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = frost_protection_active {
            local_var_form_params
                .insert("frostProtectionActive", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = frost_protection_temperature {
            local_var_form_params.insert(
                "frostProtectionTemperature",
                local_var_param_value.to_string(),
            );
        }
        if let Some(local_var_param_value) = heating_power {
            local_var_form_params.insert("heatingPower", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = heating_time_fri1 {
            local_var_form_params.insert("heatingTimeFri1", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = heating_time_fri2 {
            local_var_form_params.insert("heatingTimeFri2", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = heating_time_mon1 {
            local_var_form_params.insert("heatingTimeMon1", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = heating_time_mon2 {
            local_var_form_params.insert("heatingTimeMon2", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = heating_time_sat1 {
            local_var_form_params.insert("heatingTimeSat1", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = heating_time_sat2 {
            local_var_form_params.insert("heatingTimeSat2", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = heating_time_sun1 {
            local_var_form_params.insert("heatingTimeSun1", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = heating_time_sun2 {
            local_var_form_params.insert("heatingTimeSun2", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = heating_time_thu1 {
            local_var_form_params.insert("heatingTimeThu1", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = heating_time_thu2 {
            local_var_form_params.insert("heatingTimeThu2", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = heating_time_tue1 {
            local_var_form_params.insert("heatingTimeTue1", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = heating_time_tue2 {
            local_var_form_params.insert("heatingTimeTue2", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = heating_time_wed1 {
            local_var_form_params.insert("heatingTimeWed1", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = heating_time_wed2 {
            local_var_form_params.insert("heatingTimeWed2", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = heating_times_active_for_comfort {
            local_var_form_params.insert(
                "heatingTimesActiveForComfort",
                local_var_param_value.to_string(),
            );
        }
        if let Some(local_var_param_value) = on_off {
            local_var_form_params.insert("onOff", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = operating_mode {
            local_var_form_params.insert("operatingMode", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = revision {
            local_var_form_params.insert("revision", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = set_back_temperature {
            local_var_form_params.insert("setBackTemperature", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = target_temperature {
            local_var_form_params.insert("targetTemperature", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = temperature_offset {
            local_var_form_params.insert("temperatureOffset", local_var_param_value.to_string());
        }
        local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<StoveControlsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn stove_status(
        &self,
        params: StoveStatusParams,
    ) -> Result<models::StoveStatus, Error<StoveStatusError>> {
        let StoveStatusParams { stove_id } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/client/{stoveId}/status",
            local_var_configuration.base_path,
            stoveId = crate::apis::urlencode(stove_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to `models::StoveStatus`",
                    )));
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be converted to `models::StoveStatus`"
                    ))));
                }
            }
        } else {
            let local_var_entity: Option<StoveStatusError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed errors of method [`list_stoves`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListStovesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`stove_controls`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StoveControlsError {
    Status404(String),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`stove_status`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StoveStatusError {
    Status401(String),
    Status500(String),
    UnknownValue(serde_json::Value),
}
